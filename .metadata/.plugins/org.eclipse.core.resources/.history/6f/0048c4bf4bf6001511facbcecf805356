
/**
 * PetriDish.java - 
 * 
 * @author Jonathan Winters
 * @course CSCI 150/L
 * @homework Homework 04 - Simulation
 * @date 27 March 2016
 * @email jtwinters@g.coastal.edu
 */

import java.util.Random;

public class PetriDish {

	// VARIABLES //
	/**
	 * 
	 */
	public static final int STARTING_AMOEBAS = 100;
	/**
	 * 
	 */
	public static final int STARTING_NEMATODES = 5;
	/**
	 * 
	 */
	private static Organism[][] dish = new Organism[20][20];
	/**
	 * 
	 */
	Random randomGenerator = new Random();
	// public static PetriDish petriDish = new PetriDish();

	// CONSTRUCTORS //
	/**
	 * 
	 */
	public PetriDish() {
		dish = new Organism[20][20];
		// drawAllOrganisms();
		// update();
		// moveAllNematodes();
		// moveAllAmoebas();
	}

	/**
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		int aliveN = 0;
		int aliveA = 0;
		// boolean aliveO = true;
		int timeStep = 0;
		drawAllOrganisms();

		do {
			try {
				Thread.sleep(2000);
				update();
				System.out.println();
				aliveN = 0;
				aliveA = 0;
				for (int i = 0; i < dish.length; i++) {
					for (int j = 0; j < dish[i].length; j++) {
						if (dish[i][j] != null) {
							if (dish[i][j] instanceof Amoeba) {
								aliveA++;
							}
							if (dish[i][j] instanceof Nematode) {
								aliveN++;
							}
						}
					}
				}
				timeStep++;
				System.out.println("Time step: " + timeStep);
				System.out.println("Nematode count: " + aliveN);
				System.out.println("Amoeba count: " + aliveA);
				System.out.println();

				moveAllNematodes();

				moveAllAmoebas();

			} catch (InterruptedException ie) {
				System.out.println("InterruptedException should not have occurred.");
			}
		} while (aliveA > 0 && aliveN > 0);

		if (aliveA == 0) {
			System.out.println("All Amoebas are dead. Simulation over.");
			System.exit(1);
		} else if (aliveN == 0) {
			System.out.println("All Nematodes are dead. Simulation over.");
			System.exit(1);
		}

	}

	/*
	 * public static void main(String[] args) { drawAllOrganisms(); update(); }
	 */

	/*
	 * public PetriDish(Organism[][] dish1) { dish = dish1; }
	 */

	/**
	 * this method prints all of the contents in the array to the console
	 */
	public static void update() {
		for (int i = 0; i < dish.length; i++) {
			System.out.print(i + " ");
			for (int j = 0; j < dish[i].length; j++) {
				if (dish[i][j] instanceof Nematode || dish[i][j] instanceof Amoeba) {
					System.out.print(dish[i][j].getSymbol() + " ");
				} else if (dish[i][j] == null) {
					System.out.print("-" + " ");
				}

			}
			System.out.println();
		}
	}

	/**
	 * this method fills the array with 5 nematodes and 100 amoebas
	 */
	public static void drawAllOrganisms() {
		// int randomRow = new Random().nextInt(4);
		// int randomCol = new Random().nextInt(4);
		int nemCounter = 0;
		int amCounter = 0;

		while (nemCounter < STARTING_NEMATODES) {
			int randomRow = (int) (Math.random() * 20);
			int randomCol = (int) (Math.random() * 20);
			if (dish[randomRow][randomCol] == null) {
				nemCounter++;
				dish[randomRow][randomCol] = new Nematode();
			}
		}

		while (amCounter < STARTING_AMOEBAS) {
			int randomRow = (int) (Math.random() * 20);
			int randomCol = (int) (Math.random() * 20);
			if (dish[randomRow][randomCol] == null) {
				amCounter++;
				dish[randomRow][randomCol] = new Amoeba();

			}
		}
	}

	/**
	 * moves all organisms method not necessary
	 */
	/*
	 * public void moveAllOrganisms() {
	 * 
	 * }
	 */

	/**
	 * this method moves the nematodes
	 */
	public static void moveAllNematodes() {
		int direction = 0;
		int left = 0;
		int up = 1;
		int right = 2;
		int down = 3;
		for (int row = 0; row < dish.length; row++) {
			for (int col = 0; col < dish[row].length; col++) {
				try {
					if (dish[row][col] instanceof Nematode) {
						Nematode nematode1 = (Nematode) dish[row][col];
						// Nematode nematode1 = (Nematode)

						if (nematode1.getHasMoved() != true) {
							direction = dish[row][col].move();
							// if (col-- >= 0 && row-- >= 0 && col++ < 20 &&
							// row++ < 20) {
							if (dish[row][col--] instanceof Amoeba) {
								nematode1.consume();
								dish[row][col--] = dish[row][col];
								// Nematode nematode1A = (Nematode)
								// dish[row][col--];
								// nematode1.consume();
								// nematode1A.consume();
								dish[row][col] = null;
							}
							// if ((row--) >= 0) {
							else if (dish[row--][col] instanceof Amoeba) {
								nematode1.consume();
								dish[row--][col] = dish[row][col];
								// Nematode nematode1A = (Nematode) dish[row
								// -
								// 1][col];
								// nematode1A.consume();
								// nematode1.consume();
								dish[row][col] = null;
							} else if (dish[row][col++] instanceof Amoeba) {
								nematode1.consume();
								dish[row][col++] = dish[row][col];
								// Nematode nematode1A = (Nematode)
								// dish[row][col++];
								// nematode1.consume();
								// nematode1.consume();
								dish[row][col] = null;
							} else if (dish[row++][col] instanceof Amoeba) {
								nematode1.consume();
								dish[row++][col] = dish[row][col];
								// Nematode nematode1A = (Nematode) dish[row
								// +
								// 1][col];
								// nematode1A.consume();
								// nematode1.consume();
								dish[row][col] = null;
							} else {
								if (direction == left) {
									if (dish[row][col--] == null) {
										dish[row][col--] = dish[row][col];
										dish[row][col] = null;
									}
								} else if (direction == up) {
									if (dish[row--][col] == null) {
										dish[row--][col] = dish[row][col];
										dish[row][col] = null;
									}
								}
								// }
								// if ((col++) < 20) {
								else if (direction == right) {
									if (dish[row][col++] == null) {
										dish[row][col++] = dish[row][col];
										dish[row][col] = null;
									}
								}
								// }
								// if ((row++) < 20) {
								else if (direction == down) {
									if (dish[row++][col] == null) {
										dish[row++][col] = dish[row][col];
										dish[row][col] = null;
									}
									// }
									// }

									// direction = (int) Math.random() * 4;
									/*
									 * if ((col--) >= 0) {
									 * 
									 * } if ((row--) >= 0) {
									 * 
									 * } if ((col++) < 20) {
									 * 
									 * } if ((row++) < 20) {
									 * 
									 * }
									 */
									/*
									 * else { dish[row][col] = dish[row][col]; }
									 */
								} else {
									dish[row][col] = dish[row][col];
								}

							}
							if (dish[row][col] instanceof Nematode) {
								// && row++ < 20) {
								Nematode nematode2 = (Nematode) dish[row][col];
								// dish[row][col];
								if (nematode2.getStepsToSpawn() <= 0) {
									// direction = (int) Math.random() * 4;
									direction = dish[row][col].move();
									// if ((col--) >= 0) {
									if (direction == left && col-- >= 0) {
										dish[row][col--] = new Nematode();
										nematode2.spawnChild();
									}
									// }
									// if ((row--) >= 0) {
									if (direction == up && row-- >= 0) {
										dish[row--][col] = new Nematode();
										nematode2.spawnChild();
									}
									// }
									// if ((col++) < 20) {
									if (direction == right && col++ < 20) {
										dish[row][col++] = new Nematode();
										nematode2.spawnChild();
									}
									// }
									// if ((row++) < 20) {
									if (direction == down && row++ < 20) {
										dish[row++][col] = new Nematode();
										nematode2.spawnChild();
									} else {
										dish[row][col] = dish[row][col];
									}

								}
							}

						}
						if (dish[row][col] instanceof Nematode) {
							// Nematode nematode3 = (Nematode) dish[row][col];
							if (nematode1.getStepsToStarve() <= 0) {
								dish[row][col] = null;
							}
						}
						if (dish[row][col] instanceof Nematode) {
							dish[row][col].setHasMoved(false);
						}
					}
				} catch (ArrayIndexOutOfBoundsException aioobe) {
					dish[row][col] = dish[row][col];
					// if (dish[row][col] instanceof Nematode) {
					// dish[row][col] = dish[row][col];
					// }
				}
			}
		}
	}

	/**
	 * this method moves the amoebas
	 */
	public static void moveAllAmoebas() {
		int direction = 0;
		int left = 0;
		int up = 1;
		int right = 2;
		int down = 3;
		for (int row = 0; row < dish.length; row++) {
			for (int col = 0; col < dish[row].length; col++) {
				try {
					if (dish[row][col] instanceof Amoeba) {

						if (dish[row][col].getHasMoved() != true) {
							// direction = (int) Math.random() * 4;
							direction = dish[row][col].move();
							// if ((col--) >= 0) {
							if (direction == left) {
								if (dish[row][col--] == null) {
									dish[row][col--] = dish[row][col];
									dish[row][col] = null;
								}
							}
							// }
							// if ((row--) >= 0) {
							else if (direction == up) {
								if (dish[row--][col] == null) {
									dish[row--][col] = dish[row][col];
									dish[row][col] = null;
								}
							}
							// }
							// if ((col++) < 20) {
							else if (direction == right) {
								if (dish[row][col++] == null) {
									dish[row][col++] = dish[row][col];
									dish[row][col] = null;
								}
							}
							// }
							// if ((row++) < 20) {
							else if (direction == down) {
								if (dish[row++][col] == null) {
									dish[row++][col] = dish[row][col];
									dish[row][col] = null;
								}
								// }
							}
							// else {
							// dish[row][col] = dish[row][col];
							// }
							/*
							 * else { dish[row][col] = dish[row][col]; }
							 */

							// Amoeba amoeba1 = (Amoeba) dish[row][col];
							if (dish[row][col] instanceof Amoeba) {
								if (dish[row][col].getStepsToSpawn() <= 0) {
									// direction = (int) Math.random() * 4;
									direction = dish[row][col].move();
									// if ((col--) >= 0) {
									if (direction == left && col-- >= 0) {
										dish[row][col--] = new Amoeba();
										dish[row][col].spawnChild();
									}
									// }
									// if ((row--) >= 0) {
									if (direction == up && row-- >= 0) {
										dish[row--][col] = new Amoeba();
										dish[row][col].spawnChild();
									}
									// }
									// if ((col++) < 20) {
									if (direction == right && col++ < 20) {
										dish[row][col++] = new Amoeba();
										dish[row][col].spawnChild();
									}
									// }
									// if ((row++) < 20) {
									if (direction == down && row++ < 20) {
										dish[row++][col] = new Amoeba();
										dish[row][col].spawnChild();
										// }
									}
									// else {
									// dish[row][col] = dish[row][col];
									// }
									/*
									 * else { dish[row][col] = dish[row][col]; }
									 */
								}
							}

						}
						if (dish[row][col] instanceof Amoeba) {
							dish[row][col].setHasMoved(false);
						}
					}

				} catch (ArrayIndexOutOfBoundsException aioobe) {
					// if (dish[row][col] instanceof Amoeba) {
					dish[row][col] = dish[row][col];
					// }
				}
			}
		}
	}
}
